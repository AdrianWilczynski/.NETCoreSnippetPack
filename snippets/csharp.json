{
	"Class and Namespace": {
		"prefix": "class-namespace",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"",
			"namespace ${1:Namespace}",
			"{",
			"\tpublic class ${TM_FILENAME_BASE}",
			"\t{",
			"\t\t$0",
			"\t}",
			"}"
		]
	},
	"Interface and Namespace": {
		"prefix": "interface-namespace",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"",
			"namespace ${1:Namespace}",
			"{",
			"\tpublic interface ${TM_FILENAME_BASE}",
			"\t{",
			"\t\t$0",
			"\t}",
			"}"
		]
	},
	"Guess Namespace": {
		"prefix": "namespace-guess",
		"body": [
			"${TM_DIRECTORY/(.*[\\\\\\/](repos|src|test|tests|desktop|projects)[\\\\\\/])|(^([a-z]:)?[\\\\\\/])|([\\\\\\/])|([^\\w.])/${5:+.}${6:+_}/gi}"
		],
		"description": "Namespace based on directory structure.\n\nFor it to work your project's root folder must be in one of the following directories:\n- repos,\n- src,\n- test,\n- tests,\n- projects,\n- desktop.\n\nFolder name matching is case insensitive."
	},
	"Method": {
		"prefix": "method",
		"body": [
			"${1:public} ${2:void} ${3:MethodName}($4)",
			"{",
			"\t$0",
			"}"
		]
	},
	"Field": {
		"prefix": "field",
		"body": [
			"private ${1:readonly} ${2:Type} ${3:_name};"
		]
	},
	"Underscored Field Name": {
		"prefix": "_",
		"body": [
			"${TM_CURRENT_LINE/(^[ \\t]*((public|private|protected|internal|new|volatile|unsafe|static|readonly)[ \\t]+)*(?!(abstract|as|base|break|case|catch|checked|class|const|continue|default|delegate|do|else|enum|event|explicit|extern|false|finally|fixed|for|foreach|goto|if|implicit|in|interface|internal|is|lock|namespace|new|null|operator|out|override|params|private|protected|public|readonly|ref|return|sealed|sizeof|stackalloc|static|struct|switch|this|throw|true|try|typeof|unchecked|unsafe|using|virtual|void|volatile|while|add|alias|ascending|async|await|by|descending|dynamic|equals|from|get|global|group|into|join|let|nameof|on|orderby|partial|remove|select|set|value|var|when|where|yield)[^\\w])(\\w+(<[\\w \\t,.<>[\\]]+>)?\\.)*I?([A-Z]|(?<!I)[a-z_])(\\w*)(<[\\w \\t,.<>[\\]]+>)?(\\[[ \\t,]*])*[ \\t]+_?[ \\t]*;?[ \\t]*$)|(.*)/${7:+_}${7:/downcase}$8/g}"
		],
		"description": "Underscored field name based on preceding type."
	},
	"Filename Base": {
		"prefix": "filename-base",
		"body": "${TM_FILENAME_BASE}"
	},
	"MVC Controller": {
		"prefix": "asp-mvc-controller",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using Microsoft.AspNetCore.Mvc;",
			"",
			"namespace ${1:Namespace}",
			"{",
			"\tpublic class ${TM_FILENAME_BASE} : Controller",
			"\t{",
			"\t\tpublic IActionResult ${2:Index}()",
			"\t\t{",
			"\t\t\t$0",
			"\t\t\treturn View();",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"API Controller": {
		"prefix": "asp-api-controller",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using Microsoft.AspNetCore.Mvc;",
			"",
			"namespace ${1:Namespace}$0",
			"{",
			"\t[Route(\"api/[controller]\")]",
			"\t[ApiController]",
			"\tpublic class ${TM_FILENAME_BASE} : ControllerBase",
			"\t{",
			"\t\t[HttpGet]",
			"\t\tpublic ActionResult<IEnumerable<string>> Get()",
			"\t\t{",
			"\t\t\treturn new string[] { \"value1\", \"value2\" };",
			"\t\t}",
			"",
			"\t\t[HttpGet(\"{id}\")]",
			"\t\tpublic ActionResult<string> Get(int id)",
			"\t\t{",
			"\t\t\treturn \"value\";",
			"\t\t}",
			"",
			"\t\t[HttpPost]",
			"\t\tpublic void Post([FromBody] string value)",
			"\t\t{",
			"\t\t}",
			"",
			"\t\t[HttpPut(\"{id}\")]",
			"\t\tpublic void Put(int id, [FromBody] string value)",
			"\t\t{",
			"\t\t}",
			"",
			"\t\t[HttpDelete(\"{id}\")]",
			"\t\tpublic void Delete(int id)",
			"\t\t{",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"Page Model": {
		"prefix": "asp-page-model",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using Microsoft.AspNetCore.Mvc;",
			"using Microsoft.AspNetCore.Mvc.RazorPages;",
			"",
			"namespace ${1:Namespace}",
			"{",
			"\tpublic class ${TM_FILENAME_BASE/(.*)\\..+$/$1/}Model : PageModel",
			"\t{",
			"\t\tpublic void OnGet()",
			"\t\t{",
			"\t\t\t$0",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"View Component": {
		"prefix": "asp-view-component",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using Microsoft.AspNetCore.Mvc;",
			"",
			"namespace ${1:Namespace}",
			"{",
			"\tpublic class ${TM_FILENAME_BASE} : ViewComponent",
			"\t{",
			"\t\tpublic IViewComponentResult Invoke()",
			"\t\t{",
			"\t\t\t$0",
			"\t\t\treturn View();",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"Action Filter": {
		"prefix": "asp-action-filter",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using Microsoft.AspNetCore.Mvc.Filters;",
			"",
			"namespace ${1:Namespace}",
			"{",
			"\tpublic class ${TM_FILENAME_BASE} : IActionFilter",
			"\t{",
			"\t\tpublic void OnActionExecuting(ActionExecutingContext context)",
			"\t\t{",
			"\t\t\t$0",
			"\t\t}",
			"",
			"\t\tpublic void OnActionExecuted(ActionExecutedContext context)",
			"\t\t{",
			"",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"MVC Action": {
		"prefix": "asp-action",
		"body": [
			"public IActionResult ${1:ActionName}($2)",
			"{",
			"\t$0",
			"\treturn View();",
			"}"
		]
	},
	"DbContext": {
		"prefix": "ef-db-context",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using Microsoft.EntityFrameworkCore;",
			"",
			"namespace ${1:Namespace}",
			"{",
			"\tpublic class ${TM_FILENAME_BASE} : DbContext",
			"\t{",
			"\t\tpublic ${TM_FILENAME_BASE}(DbContextOptions<${TM_FILENAME_BASE}> options) : base(options) { }",
			"\t\t$0",
			"\t}",
			"}"
		]
	},
	"AutoMapper Profile": {
		"prefix": "am-profile",
		"body": [
			"using AutoMapper;",
			"",
			"namespace ${1:Namespace}",
			"{",
			"\tpublic class ${TM_FILENAME_BASE} : Profile",
			"\t{",
			"\t\tpublic ${TM_FILENAME_BASE}()",
			"\t\t{",
			"\t\t\tCreateMap<${2:SourceType}, ${3:DestinationType}>();$0",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"AutoMapper Type Converter": {
		"prefix": "am-type-converter",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using AutoMapper;",
			"",
			"namespace ${1:Namespace}",
			"{",
			"\tpublic class ${TM_FILENAME_BASE} : ITypeConverter<${2:SourceType}, ${3:DestinationType}>",
			"\t{",
			"\t\tpublic $3 Convert($2 source, $3 destination, ResolutionContext context)",
			"\t\t{",
			"\t\t\t$0",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"xUnit Test Class": {
		"prefix": "xu-class",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using Xunit;",
			"",
			"namespace ${1:Namespace}",
			"{",
			"\tpublic class ${TM_FILENAME_BASE}",
			"\t{",
			"\t\t[Fact]",
			"\t\tpublic void ${2:TestName}()",
			"\t\t{",
			"\t\t\t$0",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"xUnit Fact": {
		"prefix": "xu-fact",
		"body": [
			"[Fact]",
			"public void ${1:TestName}()",
			"{",
			"\t$0",
			"}"
		]
	},
	"NuGet Package Reference": {
		"prefix": "ds-nuget-reference",
		"body": [
			"#r \"nuget: ${1:PackageName}, ${2:Version}\""
		]
	},
	"Script Reference": {
		"prefix": "ds-script-load",
		"body": [
			"#load \"${1:scriptFile.csx}\""
		]
	}
}